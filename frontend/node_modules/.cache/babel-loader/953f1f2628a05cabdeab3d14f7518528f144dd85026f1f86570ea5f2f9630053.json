{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\netod\\\\Desktop\\\\mysql-mcp-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // // // src/App.js\n// // // import React, { useState } from \"react\";\n// // // import axios from \"axios\";\n\n// // // export default function App() {\n// // //   const [schema, setSchema] = useState(\"\");\n// // //   const [prompt, setPrompt] = useState(\"\");\n// // //   const [response, setResponse] = useState(null);\n// // //   const [sql, setSql] = useState(\"\");\n\n// // //   const handleSubmit = async () => {\n// // //     const res = await axios.post(\"http://localhost:8000/query\", { schema, prompt });\n// // //     setSql(res.data.sql);\n// // //     setResponse(res.data.result);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Prompt to SQL</h2>\n// // //       <input placeholder=\"Schema\" value={schema} onChange={(e) => setSchema(e.target.value)} />\n// // //       <input placeholder=\"Prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n// // //       <button onClick={handleSubmit}>Submit</button>\n// // //       {sql && <pre>{sql}</pre>}\n// // //       {response && <table><thead><tr>{response.columns.map(c => <th>{c}</th>)}</tr></thead><tbody>{response.rows.map(row => <tr>{row.map(cell => <td>{cell}</td>)}</tr>)}</tbody></table>}\n// // //     </div>\n// // //   );\n// // // }\n\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function App() {\n// //   const [schema, setSchema] = useState(\"\");\n// //   const [prompt, setPrompt] = useState(\"\");\n// //   const [sql, setSql] = useState(\"\");\n// //   const [manualSQL, setManualSQL] = useState(\"\");\n// //   const [response, setResponse] = useState(null);\n\n// //   const handlePromptSubmit = async () => {\n// //     try {\n// //       const res = await axios.post(\"http://localhost:8000/query\", {\n// //         schema,\n// //         prompt,\n// //       });\n// //       setSql(res.data.sql);\n// //       setResponse(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// //     }\n// //   };\n\n// //   const handleManualSubmit = async () => {\n// //     try {\n// //       const res = await axios.post(\"http://localhost:8000/manual-query\", {\n// //         sql: manualSQL,\n// //       });\n// //       setSql(manualSQL);\n// //       setResponse(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// //     }\n// //   };\n\n// //   return (\n// //     <div style={{ padding: 20 }}>\n// //       <h2>üîç Prompt to SQL</h2>\n// //       <input\n// //         placeholder=\"Schema (e.g. users(id,name,email))\"\n// //         value={schema}\n// //         onChange={(e) => setSchema(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 10 }}\n// //       />\n// //       <br />\n// //       <input\n// //         placeholder=\"Enter your prompt\"\n// //         value={prompt}\n// //         onChange={(e) => setPrompt(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 10 }}\n// //       />\n// //       <br />\n// //       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n// //       <h2 style={{ marginTop: 40 }}>üìù Run Manual SQL</h2>\n// //       <input\n// //         placeholder=\"Enter SQL (e.g. SELECT * FROM users)\"\n// //         value={manualSQL}\n// //         onChange={(e) => setManualSQL(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 10 }}\n// //       />\n// //       <br />\n// //       <button onClick={handleManualSubmit}>Run SQL</button>\n\n// //       {sql && (\n// //         <div style={{ marginTop: 20 }}>\n// //           <h4>Generated SQL:</h4>\n// //           <pre>{sql}</pre>\n// //         </div>\n// //       )}\n\n// //       {response && (\n// //         <div>\n// //           <h4>Result:</h4>\n// //           <table border=\"1\" cellPadding=\"5\">\n// //             <thead>\n// //               <tr>\n// //                 {response.columns.map((col, idx) => (\n// //                   <th key={idx}>{col}</th>\n// //                 ))}\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {response.rows.map((row, i) => (\n// //                 <tr key={i}>\n// //                   {row.map((cell, j) => (\n// //                     <td key={j}>{cell}</td>\n// //                   ))}\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function App() {\n//   const [dbType, setDbType] = useState(\"mysql\");\n//   const [schema, setSchema] = useState(\"\");\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [manualSQL, setManualSQL] = useState(\"\");\n//   const [collection, setCollection] = useState(\"\");\n//   const [mongoQuery, setMongoQuery] = useState(\"{}\");\n//   const [result, setResult] = useState(null);\n//   const [sql, setSql] = useState(\"\");\n\n//   const backend = \"http://localhost:8000\";\n\n//   const handlePromptSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/query`, { prompt, schema });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n//       }\n\n//       setSql(res.data.sql || \"\");\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const handleManualSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-query`, {\n//           collection,\n//           query: JSON.parse(mongoQuery)\n//         });\n//       }\n//       setSql(manualSQL);\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const renderResult = () => {\n//     if (!result) return null;\n//     if (dbType === \"mongo\") {\n//       return (\n//         <table border=\"1\" cellPadding=\"5\">\n//           <thead>\n//             <tr>\n//               {Object.keys(result[0] || {}).map((key) => (\n//                 <th key={key}>{key}</th>\n//               ))}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {result.map((doc, i) => (\n//               <tr key={i}>\n//                 {Object.values(doc).map((val, j) => (\n//                   <td key={j}>{JSON.stringify(val)}</td>\n//                 ))}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       );\n//     } else {\n//       return (\n//         <table border=\"1\" cellPadding=\"5\">\n//           <thead>\n//             <tr>\n//               {result.columns.map((col, i) => <th key={i}>{col}</th>)}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {result.rows.map((row, i) => (\n//               <tr key={i}>\n//                 {row.map((cell, j) => <td key={j}>{cell}</td>)}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       <h2>üìä Universal DB Query Interface</h2>\n\n//       <label>Select Database:</label>\n//       <select value={dbType} onChange={(e) => setDbType(e.target.value)}>\n//         <option value=\"mysql\">MySQL</option>\n//         <option value=\"postgres\">PostgreSQL</option>\n//         <option value=\"mongo\">MongoDB</option>\n//       </select>\n\n//       <hr />\n\n//       <h3>üß† Natural Language Prompt</h3>\n//       <input\n//         placeholder=\"Schema (optional)\"\n//         value={schema}\n//         onChange={(e) => setSchema(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 8 }}\n//       />\n//       <br />\n//       <input\n//         placeholder=\"Prompt (e.g. show all users over 30)\"\n//         value={prompt}\n//         onChange={(e) => setPrompt(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 8 }}\n//       />\n//       <br />\n//       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n//       <h3 style={{ marginTop: 30 }}>‚úçÔ∏è Manual Query</h3>\n\n//       {dbType === \"mongo\" && (\n//         <>\n//           <input\n//             placeholder=\"Collection\"\n//             value={collection}\n//             onChange={(e) => setCollection(e.target.value)}\n//             style={{ width: \"80%\", marginBottom: 8 }}\n//           />\n//           <br />\n//           <input\n//             placeholder='Query JSON (e.g. {\"age\": {\"$gt\": 25}})'\n//             value={mongoQuery}\n//             onChange={(e) => setMongoQuery(e.target.value)}\n//             style={{ width: \"80%\", marginBottom: 8 }}\n//           />\n//         </>\n//       )}\n\n//       {dbType !== \"mongo\" && (\n//         <input\n//           placeholder=\"SQL (e.g. SELECT * FROM table)\"\n//           value={manualSQL}\n//           onChange={(e) => setManualSQL(e.target.value)}\n//           style={{ width: \"80%\", marginBottom: 8 }}\n//         />\n//       )}\n\n//       <br />\n//       <button onClick={handleManualSubmit}>Run Manual Query</button>\n\n//       {sql && (\n//         <>\n//           <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n//           <pre>{sql}</pre>\n//         </>\n//       )}\n\n//       <h4 style={{ marginTop: 20 }}>üìã Result</h4>\n//       {renderResult()}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [dbType, setDbType] = useState(\"mysql\");\n  const [schema, setSchema] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [manualSQL, setManualSQL] = useState(\"\");\n  const [collection, setCollection] = useState(\"\");\n  const [mongoQuery, setMongoQuery] = useState(\"{}\");\n  const [result, setResult] = useState(null);\n  const [sql, setSql] = useState(\"\");\n  const backend = \"http://localhost:8000\";\n  const handlePromptSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/query`, {\n          prompt,\n          schema\n        });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-nl-query`, {\n          prompt,\n          schema\n        });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-nl-query`, {\n          prompt,\n          schema\n        });\n      }\n      setSql(res.data.sql || \"\");\n      setResult(res.data.result);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert(\"Error: \" + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message));\n    }\n  };\n  const handleManualSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/manual-query`, {\n          sql: manualSQL\n        });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-query`, {\n          sql: manualSQL\n        });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-query`, {\n          collection,\n          query: JSON.parse(mongoQuery)\n        });\n      }\n      setSql(manualSQL);\n      setResult(res.data.result);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      alert(\"Error: \" + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message));\n    }\n  };\n  const renderResult = () => {\n    if (!result) return null;\n    const tableStyle = {\n      borderCollapse: \"collapse\",\n      width: \"100%\",\n      marginTop: 10\n    };\n    const thtd = {\n      border: \"1px solid #ccc\",\n      padding: \"8px\",\n      textAlign: \"left\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      style: tableStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: (dbType === \"mongo\" ? Object.keys(result[0] || {}) : result.columns).map((col, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n            style: thtd,\n            children: col\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: (dbType === \"mongo\" ? result : result.rows).map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: (dbType === \"mongo\" ? Object.values(row) : row).map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: thtd,\n            children: typeof cell === \"object\" ? JSON.stringify(cell) : cell\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 30,\n      fontFamily: \"Arial, sans-serif\",\n      maxWidth: 900,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: 10\n      },\n      children: \"\\uD83D\\uDCCA Universal DB Query Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Select Database:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: dbType,\n        onChange: e => setDbType(e.target.value),\n        style: {\n          padding: 6,\n          marginTop: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mysql\",\n          children: \"MySQL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"postgres\",\n          children: \"PostgreSQL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mongo\",\n          children: \"MongoDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 30\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83E\\uDDE0 Natural Language Prompt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Schema (optional)\",\n        value: schema,\n        onChange: e => setSchema(e.target.value),\n        style: {\n          width: \"100%\",\n          padding: 8,\n          marginBottom: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Prompt (e.g. show all users over 30)\",\n        value: prompt,\n        onChange: e => setPrompt(e.target.value),\n        style: {\n          width: \"100%\",\n          padding: 8,\n          marginBottom: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePromptSubmit,\n        style: {\n          padding: \"10px 16px\",\n          background: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          borderRadius: 4\n        },\n        children: \"Submit Prompt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u270D\\uFE0F Manual Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), dbType === \"mongo\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Collection\",\n          value: collection,\n          onChange: e => setCollection(e.target.value),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Query JSON (e.g. {\\\"gpa\\\": {\\\"$gt\\\": 3.0}})\",\n          value: mongoQuery,\n          onChange: e => setMongoQuery(e.target.value),\n          style: {\n            width: \"100%\",\n            padding: 8,\n            marginBottom: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"SQL (e.g. SELECT * FROM students)\",\n        value: manualSQL,\n        onChange: e => setManualSQL(e.target.value),\n        style: {\n          width: \"100%\",\n          padding: 8,\n          marginBottom: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualSubmit,\n        style: {\n          padding: \"10px 16px\",\n          background: \"#2196F3\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n          borderRadius: 4\n        },\n        children: \"Run Manual Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), sql && dbType !== \"mongo\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginTop: 30\n        },\n        children: \"\\uD83E\\uDDFE SQL Used\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          background: \"#f4f4f4\",\n          padding: 10,\n          borderRadius: 4,\n          overflowX: \"auto\"\n        },\n        children: sql\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), result && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginTop: 30\n        },\n        children: \"\\uD83D\\uDCCB Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 11\n      }, this), renderResult()]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LOPpEITBX8cy8ttTJMng6FRC0nw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","dbType","setDbType","schema","setSchema","prompt","setPrompt","manualSQL","setManualSQL","collection","setCollection","mongoQuery","setMongoQuery","result","setResult","sql","setSql","backend","handlePromptSubmit","res","post","data","err","_err$response","_err$response$data","alert","response","error","message","handleManualSubmit","query","JSON","parse","_err$response2","_err$response2$data","renderResult","tableStyle","borderCollapse","width","marginTop","thtd","border","padding","textAlign","style","children","Object","keys","columns","map","col","i","fileName","_jsxFileName","lineNumber","columnNumber","rows","row","values","cell","j","stringify","fontFamily","maxWidth","margin","marginBottom","value","onChange","e","target","placeholder","onClick","background","color","cursor","borderRadius","overflowX","_c","$RefreshReg$"],"sources":["C:/Users/netod/Desktop/mysql-mcp-project/frontend/src/App.js"],"sourcesContent":["// // // // src/App.js\n// // // import React, { useState } from \"react\";\n// // // import axios from \"axios\";\n\n// // // export default function App() {\n// // //   const [schema, setSchema] = useState(\"\");\n// // //   const [prompt, setPrompt] = useState(\"\");\n// // //   const [response, setResponse] = useState(null);\n// // //   const [sql, setSql] = useState(\"\");\n\n// // //   const handleSubmit = async () => {\n// // //     const res = await axios.post(\"http://localhost:8000/query\", { schema, prompt });\n// // //     setSql(res.data.sql);\n// // //     setResponse(res.data.result);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h2>Prompt to SQL</h2>\n// // //       <input placeholder=\"Schema\" value={schema} onChange={(e) => setSchema(e.target.value)} />\n// // //       <input placeholder=\"Prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n// // //       <button onClick={handleSubmit}>Submit</button>\n// // //       {sql && <pre>{sql}</pre>}\n// // //       {response && <table><thead><tr>{response.columns.map(c => <th>{c}</th>)}</tr></thead><tbody>{response.rows.map(row => <tr>{row.map(cell => <td>{cell}</td>)}</tr>)}</tbody></table>}\n// // //     </div>\n// // //   );\n// // // }\n\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function App() {\n// //   const [schema, setSchema] = useState(\"\");\n// //   const [prompt, setPrompt] = useState(\"\");\n// //   const [sql, setSql] = useState(\"\");\n// //   const [manualSQL, setManualSQL] = useState(\"\");\n// //   const [response, setResponse] = useState(null);\n\n// //   const handlePromptSubmit = async () => {\n// //     try {\n// //       const res = await axios.post(\"http://localhost:8000/query\", {\n// //         schema,\n// //         prompt,\n// //       });\n// //       setSql(res.data.sql);\n// //       setResponse(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// //     }\n// //   };\n\n// //   const handleManualSubmit = async () => {\n// //     try {\n// //       const res = await axios.post(\"http://localhost:8000/manual-query\", {\n// //         sql: manualSQL,\n// //       });\n// //       setSql(manualSQL);\n// //       setResponse(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// //     }\n// //   };\n\n// //   return (\n// //     <div style={{ padding: 20 }}>\n// //       <h2>üîç Prompt to SQL</h2>\n// //       <input\n// //         placeholder=\"Schema (e.g. users(id,name,email))\"\n// //         value={schema}\n// //         onChange={(e) => setSchema(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 10 }}\n// //       />\n// //       <br />\n// //       <input\n// //         placeholder=\"Enter your prompt\"\n// //         value={prompt}\n// //         onChange={(e) => setPrompt(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 10 }}\n// //       />\n// //       <br />\n// //       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n// //       <h2 style={{ marginTop: 40 }}>üìù Run Manual SQL</h2>\n// //       <input\n// //         placeholder=\"Enter SQL (e.g. SELECT * FROM users)\"\n// //         value={manualSQL}\n// //         onChange={(e) => setManualSQL(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 10 }}\n// //       />\n// //       <br />\n// //       <button onClick={handleManualSubmit}>Run SQL</button>\n\n// //       {sql && (\n// //         <div style={{ marginTop: 20 }}>\n// //           <h4>Generated SQL:</h4>\n// //           <pre>{sql}</pre>\n// //         </div>\n// //       )}\n\n// //       {response && (\n// //         <div>\n// //           <h4>Result:</h4>\n// //           <table border=\"1\" cellPadding=\"5\">\n// //             <thead>\n// //               <tr>\n// //                 {response.columns.map((col, idx) => (\n// //                   <th key={idx}>{col}</th>\n// //                 ))}\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {response.rows.map((row, i) => (\n// //                 <tr key={i}>\n// //                   {row.map((cell, j) => (\n// //                     <td key={j}>{cell}</td>\n// //                   ))}\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function App() {\n//   const [dbType, setDbType] = useState(\"mysql\");\n//   const [schema, setSchema] = useState(\"\");\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [manualSQL, setManualSQL] = useState(\"\");\n//   const [collection, setCollection] = useState(\"\");\n//   const [mongoQuery, setMongoQuery] = useState(\"{}\");\n//   const [result, setResult] = useState(null);\n//   const [sql, setSql] = useState(\"\");\n\n//   const backend = \"http://localhost:8000\";\n\n//   const handlePromptSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/query`, { prompt, schema });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n//       }\n\n//       setSql(res.data.sql || \"\");\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const handleManualSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-query`, {\n//           collection,\n//           query: JSON.parse(mongoQuery)\n//         });\n//       }\n//       setSql(manualSQL);\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const renderResult = () => {\n//     if (!result) return null;\n//     if (dbType === \"mongo\") {\n//       return (\n//         <table border=\"1\" cellPadding=\"5\">\n//           <thead>\n//             <tr>\n//               {Object.keys(result[0] || {}).map((key) => (\n//                 <th key={key}>{key}</th>\n//               ))}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {result.map((doc, i) => (\n//               <tr key={i}>\n//                 {Object.values(doc).map((val, j) => (\n//                   <td key={j}>{JSON.stringify(val)}</td>\n//                 ))}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       );\n//     } else {\n//       return (\n//         <table border=\"1\" cellPadding=\"5\">\n//           <thead>\n//             <tr>\n//               {result.columns.map((col, i) => <th key={i}>{col}</th>)}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {result.rows.map((row, i) => (\n//               <tr key={i}>\n//                 {row.map((cell, j) => <td key={j}>{cell}</td>)}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       );\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       <h2>üìä Universal DB Query Interface</h2>\n\n//       <label>Select Database:</label>\n//       <select value={dbType} onChange={(e) => setDbType(e.target.value)}>\n//         <option value=\"mysql\">MySQL</option>\n//         <option value=\"postgres\">PostgreSQL</option>\n//         <option value=\"mongo\">MongoDB</option>\n//       </select>\n\n//       <hr />\n\n//       <h3>üß† Natural Language Prompt</h3>\n//       <input\n//         placeholder=\"Schema (optional)\"\n//         value={schema}\n//         onChange={(e) => setSchema(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 8 }}\n//       />\n//       <br />\n//       <input\n//         placeholder=\"Prompt (e.g. show all users over 30)\"\n//         value={prompt}\n//         onChange={(e) => setPrompt(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 8 }}\n//       />\n//       <br />\n//       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n//       <h3 style={{ marginTop: 30 }}>‚úçÔ∏è Manual Query</h3>\n\n//       {dbType === \"mongo\" && (\n//         <>\n//           <input\n//             placeholder=\"Collection\"\n//             value={collection}\n//             onChange={(e) => setCollection(e.target.value)}\n//             style={{ width: \"80%\", marginBottom: 8 }}\n//           />\n//           <br />\n//           <input\n//             placeholder='Query JSON (e.g. {\"age\": {\"$gt\": 25}})'\n//             value={mongoQuery}\n//             onChange={(e) => setMongoQuery(e.target.value)}\n//             style={{ width: \"80%\", marginBottom: 8 }}\n//           />\n//         </>\n//       )}\n\n//       {dbType !== \"mongo\" && (\n//         <input\n//           placeholder=\"SQL (e.g. SELECT * FROM table)\"\n//           value={manualSQL}\n//           onChange={(e) => setManualSQL(e.target.value)}\n//           style={{ width: \"80%\", marginBottom: 8 }}\n//         />\n//       )}\n\n//       <br />\n//       <button onClick={handleManualSubmit}>Run Manual Query</button>\n\n//       {sql && (\n//         <>\n//           <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n//           <pre>{sql}</pre>\n//         </>\n//       )}\n\n//       <h4 style={{ marginTop: 20 }}>üìã Result</h4>\n//       {renderResult()}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function App() {\n  const [dbType, setDbType] = useState(\"mysql\");\n  const [schema, setSchema] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [manualSQL, setManualSQL] = useState(\"\");\n  const [collection, setCollection] = useState(\"\");\n  const [mongoQuery, setMongoQuery] = useState(\"{}\");\n  const [result, setResult] = useState(null);\n  const [sql, setSql] = useState(\"\");\n\n  const backend = \"http://localhost:8000\";\n\n  const handlePromptSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/query`, { prompt, schema });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n      }\n\n      setSql(res.data.sql || \"\");\n      setResult(res.data.result);\n    } catch (err) {\n      alert(\"Error: \" + (err.response?.data?.error || err.message));\n    }\n  };\n\n  const handleManualSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-query`, {\n          collection,\n          query: JSON.parse(mongoQuery)\n        });\n      }\n      setSql(manualSQL);\n      setResult(res.data.result);\n    } catch (err) {\n      alert(\"Error: \" + (err.response?.data?.error || err.message));\n    }\n  };\n\n  const renderResult = () => {\n    if (!result) return null;\n\n    const tableStyle = {\n      borderCollapse: \"collapse\",\n      width: \"100%\",\n      marginTop: 10,\n    };\n\n    const thtd = {\n      border: \"1px solid #ccc\",\n      padding: \"8px\",\n      textAlign: \"left\",\n    };\n\n    return (\n      <table style={tableStyle}>\n        <thead>\n          <tr>\n            {(dbType === \"mongo\"\n              ? Object.keys(result[0] || {})\n              : result.columns\n            ).map((col, i) => (\n              <th style={thtd} key={i}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {(dbType === \"mongo\" ? result : result.rows).map((row, i) => (\n            <tr key={i}>\n              {(dbType === \"mongo\" ? Object.values(row) : row).map((cell, j) => (\n                <td style={thtd} key={j}>\n                  {typeof cell === \"object\" ? JSON.stringify(cell) : cell}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div style={{ padding: 30, fontFamily: \"Arial, sans-serif\", maxWidth: 900, margin: \"auto\" }}>\n      <h2 style={{ marginBottom: 10 }}>üìä Universal DB Query Interface</h2>\n\n      <div style={{ marginBottom: 20 }}>\n        <label><strong>Select Database:</strong></label><br />\n        <select value={dbType} onChange={(e) => setDbType(e.target.value)} style={{ padding: 6, marginTop: 4 }}>\n          <option value=\"mysql\">MySQL</option>\n          <option value=\"postgres\">PostgreSQL</option>\n          <option value=\"mongo\">MongoDB</option>\n        </select>\n      </div>\n\n      {/* --- Prompt Section --- */}\n      <div style={{ marginBottom: 30 }}>\n        <h3>üß† Natural Language Prompt</h3>\n        <input\n          placeholder=\"Schema (optional)\"\n          value={schema}\n          onChange={(e) => setSchema(e.target.value)}\n          style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n        />\n        <input\n          placeholder=\"Prompt (e.g. show all users over 30)\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n        />\n        <button\n          onClick={handlePromptSubmit}\n          style={{\n            padding: \"10px 16px\",\n            background: \"#4CAF50\",\n            color: \"white\",\n            border: \"none\",\n            cursor: \"pointer\",\n            borderRadius: 4\n          }}\n        >\n          Submit Prompt\n        </button>\n      </div>\n\n      {/* --- Manual Query Section --- */}\n      <div>\n        <h3>‚úçÔ∏è Manual Query</h3>\n\n        {dbType === \"mongo\" ? (\n          <>\n            <input\n              placeholder=\"Collection\"\n              value={collection}\n              onChange={(e) => setCollection(e.target.value)}\n              style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n            />\n            <input\n              placeholder='Query JSON (e.g. {\"gpa\": {\"$gt\": 3.0}})'\n              value={mongoQuery}\n              onChange={(e) => setMongoQuery(e.target.value)}\n              style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n            />\n          </>\n        ) : (\n          <input\n            placeholder=\"SQL (e.g. SELECT * FROM students)\"\n            value={manualSQL}\n            onChange={(e) => setManualSQL(e.target.value)}\n            style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n          />\n        )}\n\n        <button\n          onClick={handleManualSubmit}\n          style={{\n            padding: \"10px 16px\",\n            background: \"#2196F3\",\n            color: \"white\",\n            border: \"none\",\n            cursor: \"pointer\",\n            borderRadius: 4\n          }}\n        >\n          Run Manual Query\n        </button>\n      </div>\n\n      {/* --- SQL Used --- */}\n      {sql && dbType !== \"mongo\" && (\n        <>\n          <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n          <pre style={{\n            background: \"#f4f4f4\",\n            padding: 10,\n            borderRadius: 4,\n            overflowX: \"auto\"\n          }}>{sql}</pre>\n        </>\n      )}\n\n      {/* --- Results --- */}\n      {result && (\n        <>\n          <h4 style={{ marginTop: 30 }}>üìã Result</h4>\n          {renderResult()}\n        </>\n      )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;EAC7C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACsB,GAAG,EAAEC,MAAM,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAElC,MAAMwB,OAAO,GAAG,uBAAuB;EAEvC,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,IAAIC,GAAG;MACP,IAAIlB,MAAM,KAAK,OAAO,EAAE;QACtBkB,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGH,OAAO,QAAQ,EAAE;UAAEZ,MAAM;UAAEF;QAAO,CAAC,CAAC;MAChE,CAAC,MAAM,IAAIF,MAAM,KAAK,UAAU,EAAE;QAChCkB,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGH,OAAO,oBAAoB,EAAE;UAAEZ,MAAM;UAAEF;QAAO,CAAC,CAAC;MAC5E,CAAC,MAAM,IAAIF,MAAM,KAAK,OAAO,EAAE;QAC7BkB,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGH,OAAO,iBAAiB,EAAE;UAAEZ,MAAM;UAAEF;QAAO,CAAC,CAAC;MACzE;MAEAa,MAAM,CAACG,GAAG,CAACE,IAAI,CAACN,GAAG,IAAI,EAAE,CAAC;MAC1BD,SAAS,CAACK,GAAG,CAACE,IAAI,CAACR,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOS,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZC,KAAK,CAAC,SAAS,IAAI,EAAAF,aAAA,GAAAD,GAAG,CAACI,QAAQ,cAAAH,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBG,KAAK,KAAIL,GAAG,CAACM,OAAO,CAAC,CAAC;IAC/D;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,IAAIV,GAAG;MACP,IAAIlB,MAAM,KAAK,OAAO,EAAE;QACtBkB,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGH,OAAO,eAAe,EAAE;UAAEF,GAAG,EAAER;QAAU,CAAC,CAAC;MACvE,CAAC,MAAM,IAAIN,MAAM,KAAK,UAAU,EAAE;QAChCkB,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGH,OAAO,iBAAiB,EAAE;UAAEF,GAAG,EAAER;QAAU,CAAC,CAAC;MACzE,CAAC,MAAM,IAAIN,MAAM,KAAK,OAAO,EAAE;QAC7BkB,GAAG,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,GAAGH,OAAO,cAAc,EAAE;UAC/CR,UAAU;UACVqB,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACrB,UAAU;QAC9B,CAAC,CAAC;MACJ;MACAK,MAAM,CAACT,SAAS,CAAC;MACjBO,SAAS,CAACK,GAAG,CAACE,IAAI,CAACR,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOS,GAAG,EAAE;MAAA,IAAAW,cAAA,EAAAC,mBAAA;MACZT,KAAK,CAAC,SAAS,IAAI,EAAAQ,cAAA,GAAAX,GAAG,CAACI,QAAQ,cAAAO,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcZ,IAAI,cAAAa,mBAAA,uBAAlBA,mBAAA,CAAoBP,KAAK,KAAIL,GAAG,CAACM,OAAO,CAAC,CAAC;IAC/D;EACF,CAAC;EAED,MAAMO,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACtB,MAAM,EAAE,OAAO,IAAI;IAExB,MAAMuB,UAAU,GAAG;MACjBC,cAAc,EAAE,UAAU;MAC1BC,KAAK,EAAE,MAAM;MACbC,SAAS,EAAE;IACb,CAAC;IAED,MAAMC,IAAI,GAAG;MACXC,MAAM,EAAE,gBAAgB;MACxBC,OAAO,EAAE,KAAK;MACdC,SAAS,EAAE;IACb,CAAC;IAED,oBACE/C,OAAA;MAAOgD,KAAK,EAAER,UAAW;MAAAS,QAAA,gBACvBjD,OAAA;QAAAiD,QAAA,eACEjD,OAAA;UAAAiD,QAAA,EACG,CAAC5C,MAAM,KAAK,OAAO,GAChB6C,MAAM,CAACC,IAAI,CAAClC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAC5BA,MAAM,CAACmC,OAAO,EAChBC,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,kBACXvD,OAAA;YAAIgD,KAAK,EAAEJ,IAAK;YAAAK,QAAA,EAAUK;UAAG,GAAPC,CAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CACnC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR3D,OAAA;QAAAiD,QAAA,EACG,CAAC5C,MAAM,KAAK,OAAO,GAAGY,MAAM,GAAGA,MAAM,CAAC2C,IAAI,EAAEP,GAAG,CAAC,CAACQ,GAAG,EAAEN,CAAC,kBACtDvD,OAAA;UAAAiD,QAAA,EACG,CAAC5C,MAAM,KAAK,OAAO,GAAG6C,MAAM,CAACY,MAAM,CAACD,GAAG,CAAC,GAAGA,GAAG,EAAER,GAAG,CAAC,CAACU,IAAI,EAAEC,CAAC,kBAC3DhE,OAAA;YAAIgD,KAAK,EAAEJ,IAAK;YAAAK,QAAA,EACb,OAAOc,IAAI,KAAK,QAAQ,GAAG5B,IAAI,CAAC8B,SAAS,CAACF,IAAI,CAAC,GAAGA;UAAI,GADnCC,CAAC;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEnB,CACL;QAAC,GALKJ,CAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMN,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEZ,CAAC;EAED,oBACE3D,OAAA;IAAKgD,KAAK,EAAE;MAAEF,OAAO,EAAE,EAAE;MAAEoB,UAAU,EAAE,mBAAmB;MAAEC,QAAQ,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAnB,QAAA,gBAC1FjD,OAAA;MAAIgD,KAAK,EAAE;QAAEqB,YAAY,EAAE;MAAG,CAAE;MAAApB,QAAA,EAAC;IAA+B;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAErE3D,OAAA;MAAKgD,KAAK,EAAE;QAAEqB,YAAY,EAAE;MAAG,CAAE;MAAApB,QAAA,gBAC/BjD,OAAA;QAAAiD,QAAA,eAAOjD,OAAA;UAAAiD,QAAA,EAAQ;QAAgB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAAA3D,OAAA;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtD3D,OAAA;QAAQsE,KAAK,EAAEjE,MAAO;QAACkE,QAAQ,EAAGC,CAAC,IAAKlE,SAAS,CAACkE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAACtB,KAAK,EAAE;UAAEF,OAAO,EAAE,CAAC;UAAEH,SAAS,EAAE;QAAE,CAAE;QAAAM,QAAA,gBACrGjD,OAAA;UAAQsE,KAAK,EAAC,OAAO;UAAArB,QAAA,EAAC;QAAK;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpC3D,OAAA;UAAQsE,KAAK,EAAC,UAAU;UAAArB,QAAA,EAAC;QAAU;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5C3D,OAAA;UAAQsE,KAAK,EAAC,OAAO;UAAArB,QAAA,EAAC;QAAO;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGN3D,OAAA;MAAKgD,KAAK,EAAE;QAAEqB,YAAY,EAAE;MAAG,CAAE;MAAApB,QAAA,gBAC/BjD,OAAA;QAAAiD,QAAA,EAAI;MAA0B;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnC3D,OAAA;QACE0E,WAAW,EAAC,mBAAmB;QAC/BJ,KAAK,EAAE/D,MAAO;QACdgE,QAAQ,EAAGC,CAAC,IAAKhE,SAAS,CAACgE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC3CtB,KAAK,EAAE;UAAEN,KAAK,EAAE,MAAM;UAAEI,OAAO,EAAE,CAAC;UAAEuB,YAAY,EAAE;QAAE;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC,eACF3D,OAAA;QACE0E,WAAW,EAAC,sCAAsC;QAClDJ,KAAK,EAAE7D,MAAO;QACd8D,QAAQ,EAAGC,CAAC,IAAK9D,SAAS,CAAC8D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC3CtB,KAAK,EAAE;UAAEN,KAAK,EAAE,MAAM;UAAEI,OAAO,EAAE,CAAC;UAAEuB,YAAY,EAAE;QAAE;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC,eACF3D,OAAA;QACE2E,OAAO,EAAErD,kBAAmB;QAC5B0B,KAAK,EAAE;UACLF,OAAO,EAAE,WAAW;UACpB8B,UAAU,EAAE,SAAS;UACrBC,KAAK,EAAE,OAAO;UACdhC,MAAM,EAAE,MAAM;UACdiC,MAAM,EAAE,SAAS;UACjBC,YAAY,EAAE;QAChB,CAAE;QAAA9B,QAAA,EACH;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGN3D,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAAiD,QAAA,EAAI;MAAe;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAEvBtD,MAAM,KAAK,OAAO,gBACjBL,OAAA,CAAAE,SAAA;QAAA+C,QAAA,gBACEjD,OAAA;UACE0E,WAAW,EAAC,YAAY;UACxBJ,KAAK,EAAEzD,UAAW;UAClB0D,QAAQ,EAAGC,CAAC,IAAK1D,aAAa,CAAC0D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC/CtB,KAAK,EAAE;YAAEN,KAAK,EAAE,MAAM;YAAEI,OAAO,EAAE,CAAC;YAAEuB,YAAY,EAAE;UAAE;QAAE;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC,eACF3D,OAAA;UACE0E,WAAW,EAAC,6CAAyC;UACrDJ,KAAK,EAAEvD,UAAW;UAClBwD,QAAQ,EAAGC,CAAC,IAAKxD,aAAa,CAACwD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC/CtB,KAAK,EAAE;YAAEN,KAAK,EAAE,MAAM;YAAEI,OAAO,EAAE,CAAC;YAAEuB,YAAY,EAAE;UAAE;QAAE;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA,eACF,CAAC,gBAEH3D,OAAA;QACE0E,WAAW,EAAC,mCAAmC;QAC/CJ,KAAK,EAAE3D,SAAU;QACjB4D,QAAQ,EAAGC,CAAC,IAAK5D,YAAY,CAAC4D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC9CtB,KAAK,EAAE;UAAEN,KAAK,EAAE,MAAM;UAAEI,OAAO,EAAE,CAAC;UAAEuB,YAAY,EAAE;QAAE;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CACF,eAED3D,OAAA;QACE2E,OAAO,EAAE1C,kBAAmB;QAC5Be,KAAK,EAAE;UACLF,OAAO,EAAE,WAAW;UACpB8B,UAAU,EAAE,SAAS;UACrBC,KAAK,EAAE,OAAO;UACdhC,MAAM,EAAE,MAAM;UACdiC,MAAM,EAAE,SAAS;UACjBC,YAAY,EAAE;QAChB,CAAE;QAAA9B,QAAA,EACH;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAGLxC,GAAG,IAAId,MAAM,KAAK,OAAO,iBACxBL,OAAA,CAAAE,SAAA;MAAA+C,QAAA,gBACEjD,OAAA;QAAIgD,KAAK,EAAE;UAAEL,SAAS,EAAE;QAAG,CAAE;QAAAM,QAAA,EAAC;MAAW;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9C3D,OAAA;QAAKgD,KAAK,EAAE;UACV4B,UAAU,EAAE,SAAS;UACrB9B,OAAO,EAAE,EAAE;UACXiC,YAAY,EAAE,CAAC;UACfC,SAAS,EAAE;QACb,CAAE;QAAA/B,QAAA,EAAE9B;MAAG;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,eACd,CACH,EAGA1C,MAAM,iBACLjB,OAAA,CAAAE,SAAA;MAAA+C,QAAA,gBACEjD,OAAA;QAAIgD,KAAK,EAAE;UAAEL,SAAS,EAAE;QAAG,CAAE;QAAAM,QAAA,EAAC;MAAS;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC3CpB,YAAY,CAAC,CAAC;IAAA,eACf,CACH;EAAA;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvD,EAAA,CAxMuBD,GAAG;AAAA8E,EAAA,GAAH9E,GAAG;AAAA,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}