{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\netod\\\\Desktop\\\\mysql-mcp-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // // src/App.js\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function App() {\n// //   const [schema, setSchema] = useState(\"\");\n// //   const [prompt, setPrompt] = useState(\"\");\n// //   const [response, setResponse] = useState(null);\n// //   const [sql, setSql] = useState(\"\");\n\n// //   const handleSubmit = async () => {\n// //     const res = await axios.post(\"http://localhost:8000/query\", { schema, prompt });\n// //     setSql(res.data.sql);\n// //     setResponse(res.data.result);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Prompt to SQL</h2>\n// //       <input placeholder=\"Schema\" value={schema} onChange={(e) => setSchema(e.target.value)} />\n// //       <input placeholder=\"Prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n// //       <button onClick={handleSubmit}>Submit</button>\n// //       {sql && <pre>{sql}</pre>}\n// //       {response && <table><thead><tr>{response.columns.map(c => <th>{c}</th>)}</tr></thead><tbody>{response.rows.map(row => <tr>{row.map(cell => <td>{cell}</td>)}</tr>)}</tbody></table>}\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function App() {\n//   const [schema, setSchema] = useState(\"\");\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [sql, setSql] = useState(\"\");\n//   const [manualSQL, setManualSQL] = useState(\"\");\n//   const [response, setResponse] = useState(null);\n\n//   const handlePromptSubmit = async () => {\n//     try {\n//       const res = await axios.post(\"http://localhost:8000/query\", {\n//         schema,\n//         prompt,\n//       });\n//       setSql(res.data.sql);\n//       setResponse(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + err.response?.data?.error || err.message);\n//     }\n//   };\n\n//   const handleManualSubmit = async () => {\n//     try {\n//       const res = await axios.post(\"http://localhost:8000/manual-query\", {\n//         sql: manualSQL,\n//       });\n//       setSql(manualSQL);\n//       setResponse(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + err.response?.data?.error || err.message);\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       <h2>üîç Prompt to SQL</h2>\n//       <input\n//         placeholder=\"Schema (e.g. users(id,name,email))\"\n//         value={schema}\n//         onChange={(e) => setSchema(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 10 }}\n//       />\n//       <br />\n//       <input\n//         placeholder=\"Enter your prompt\"\n//         value={prompt}\n//         onChange={(e) => setPrompt(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 10 }}\n//       />\n//       <br />\n//       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n//       <h2 style={{ marginTop: 40 }}>üìù Run Manual SQL</h2>\n//       <input\n//         placeholder=\"Enter SQL (e.g. SELECT * FROM users)\"\n//         value={manualSQL}\n//         onChange={(e) => setManualSQL(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 10 }}\n//       />\n//       <br />\n//       <button onClick={handleManualSubmit}>Run SQL</button>\n\n//       {sql && (\n//         <div style={{ marginTop: 20 }}>\n//           <h4>Generated SQL:</h4>\n//           <pre>{sql}</pre>\n//         </div>\n//       )}\n\n//       {response && (\n//         <div>\n//           <h4>Result:</h4>\n//           <table border=\"1\" cellPadding=\"5\">\n//             <thead>\n//               <tr>\n//                 {response.columns.map((col, idx) => (\n//                   <th key={idx}>{col}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {response.rows.map((row, i) => (\n//                 <tr key={i}>\n//                   {row.map((cell, j) => (\n//                     <td key={j}>{cell}</td>\n//                   ))}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [dbType, setDbType] = useState(\"mysql\"); // default: MySQL\n  const [schema, setSchema] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [sql, setSql] = useState(\"\");\n  const [collection, setCollection] = useState(\"\");\n  const [mongoQuery, setMongoQuery] = useState(\"{}\");\n  const [manualSQL, setManualSQL] = useState(\"\");\n  const [result, setResult] = useState(null);\n  const backendURL = \"http://localhost:8000\";\n  const handleSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backendURL}/query`, {\n          prompt,\n          schema\n        });\n        setSql(res.data.sql);\n        setResult(res.data.result);\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backendURL}/postgres-query`, {\n          sql: manualSQL\n        });\n        setResult(res.data.result);\n        setSql(manualSQL);\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backendURL}/mongo-query`, {\n          collection,\n          query: JSON.parse(mongoQuery)\n        });\n        setResult(res.data.result);\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      alert(\"Error: \" + ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message);\n    }\n  };\n  const renderTable = () => {\n    if (!result) return null;\n\n    // MongoDB result is an array of objects\n    if (dbType === \"mongo\") {\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(result[0] || {}).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: result.map((doc, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.values(doc).map((val, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: JSON.stringify(val)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this))\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this);\n    }\n\n    // SQL results\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: result.columns.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: col\n          }, col, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: result.rows.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDD0C AI-Driven Multi-DB Query Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Database:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: dbType,\n      onChange: e => setDbType(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"mysql\",\n        children: \"MySQL (GPT Prompt)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"postgres\",\n        children: \"PostgreSQL (Manual SQL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"mongo\",\n        children: \"MongoDB (Manual Query)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), dbType === \"mysql\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Optional Schema (e.g., users(name, age))\",\n          value: schema,\n          onChange: e => setSchema(e.target.value),\n          style: {\n            width: \"100%\",\n            margin: \"8px 0\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Prompt (e.g., show users over age 30)\",\n          value: prompt,\n          onChange: e => setPrompt(e.target.value),\n          style: {\n            width: \"100%\",\n            margin: \"8px 0\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), dbType === \"postgres\" && /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Enter SQL (e.g., SELECT * FROM employees)\",\n      value: manualSQL,\n      onChange: e => setManualSQL(e.target.value),\n      style: {\n        width: \"100%\",\n        margin: \"8px 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this), dbType === \"mongo\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Collection name\",\n        value: collection,\n        onChange: e => setCollection(e.target.value),\n        style: {\n          width: \"100%\",\n          margin: \"8px 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Query (e.g., {\\\"age\\\": {\\\"$gt\\\": 25}})\",\n        value: mongoQuery,\n        onChange: e => setMongoQuery(e.target.value),\n        style: {\n          width: \"100%\",\n          margin: \"8px 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      style: {\n        marginTop: 10\n      },\n      children: \"Run Query\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), sql && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Generated SQL:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: sql\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this), renderTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G7H2X3Bo7VT39zKE551Tkj8shh4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","dbType","setDbType","schema","setSchema","prompt","setPrompt","sql","setSql","collection","setCollection","mongoQuery","setMongoQuery","manualSQL","setManualSQL","result","setResult","backendURL","handleSubmit","res","post","data","query","JSON","parse","err","_err$response","_err$response$data","console","error","alert","response","message","renderTable","border","children","Object","keys","map","key","fileName","_jsxFileName","lineNumber","columnNumber","doc","idx","values","val","i","stringify","columns","col","rows","row","cell","j","style","padding","value","onChange","e","target","placeholder","width","margin","onClick","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/netod/Desktop/mysql-mcp-project/frontend/src/App.js"],"sourcesContent":["// // // src/App.js\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function App() {\n// //   const [schema, setSchema] = useState(\"\");\n// //   const [prompt, setPrompt] = useState(\"\");\n// //   const [response, setResponse] = useState(null);\n// //   const [sql, setSql] = useState(\"\");\n\n// //   const handleSubmit = async () => {\n// //     const res = await axios.post(\"http://localhost:8000/query\", { schema, prompt });\n// //     setSql(res.data.sql);\n// //     setResponse(res.data.result);\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Prompt to SQL</h2>\n// //       <input placeholder=\"Schema\" value={schema} onChange={(e) => setSchema(e.target.value)} />\n// //       <input placeholder=\"Prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n// //       <button onClick={handleSubmit}>Submit</button>\n// //       {sql && <pre>{sql}</pre>}\n// //       {response && <table><thead><tr>{response.columns.map(c => <th>{c}</th>)}</tr></thead><tbody>{response.rows.map(row => <tr>{row.map(cell => <td>{cell}</td>)}</tr>)}</tbody></table>}\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function App() {\n//   const [schema, setSchema] = useState(\"\");\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [sql, setSql] = useState(\"\");\n//   const [manualSQL, setManualSQL] = useState(\"\");\n//   const [response, setResponse] = useState(null);\n\n//   const handlePromptSubmit = async () => {\n//     try {\n//       const res = await axios.post(\"http://localhost:8000/query\", {\n//         schema,\n//         prompt,\n//       });\n//       setSql(res.data.sql);\n//       setResponse(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + err.response?.data?.error || err.message);\n//     }\n//   };\n\n//   const handleManualSubmit = async () => {\n//     try {\n//       const res = await axios.post(\"http://localhost:8000/manual-query\", {\n//         sql: manualSQL,\n//       });\n//       setSql(manualSQL);\n//       setResponse(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + err.response?.data?.error || err.message);\n//     }\n//   };\n\n//   return (\n//     <div style={{ padding: 20 }}>\n//       <h2>üîç Prompt to SQL</h2>\n//       <input\n//         placeholder=\"Schema (e.g. users(id,name,email))\"\n//         value={schema}\n//         onChange={(e) => setSchema(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 10 }}\n//       />\n//       <br />\n//       <input\n//         placeholder=\"Enter your prompt\"\n//         value={prompt}\n//         onChange={(e) => setPrompt(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 10 }}\n//       />\n//       <br />\n//       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n//       <h2 style={{ marginTop: 40 }}>üìù Run Manual SQL</h2>\n//       <input\n//         placeholder=\"Enter SQL (e.g. SELECT * FROM users)\"\n//         value={manualSQL}\n//         onChange={(e) => setManualSQL(e.target.value)}\n//         style={{ width: \"80%\", marginBottom: 10 }}\n//       />\n//       <br />\n//       <button onClick={handleManualSubmit}>Run SQL</button>\n\n//       {sql && (\n//         <div style={{ marginTop: 20 }}>\n//           <h4>Generated SQL:</h4>\n//           <pre>{sql}</pre>\n//         </div>\n//       )}\n\n//       {response && (\n//         <div>\n//           <h4>Result:</h4>\n//           <table border=\"1\" cellPadding=\"5\">\n//             <thead>\n//               <tr>\n//                 {response.columns.map((col, idx) => (\n//                   <th key={idx}>{col}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {response.rows.map((row, i) => (\n//                 <tr key={i}>\n//                   {row.map((cell, j) => (\n//                     <td key={j}>{cell}</td>\n//                   ))}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function App() {\n  const [dbType, setDbType] = useState(\"mysql\");  // default: MySQL\n  const [schema, setSchema] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [sql, setSql] = useState(\"\");\n  const [collection, setCollection] = useState(\"\");\n  const [mongoQuery, setMongoQuery] = useState(\"{}\");\n  const [manualSQL, setManualSQL] = useState(\"\");\n  const [result, setResult] = useState(null);\n\n  const backendURL = \"http://localhost:8000\";\n\n  const handleSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backendURL}/query`, {\n          prompt,\n          schema\n        });\n        setSql(res.data.sql);\n        setResult(res.data.result);\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backendURL}/postgres-query`, {\n          sql: manualSQL\n        });\n        setResult(res.data.result);\n        setSql(manualSQL);\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backendURL}/mongo-query`, {\n          collection,\n          query: JSON.parse(mongoQuery)\n        });\n        setResult(res.data.result);\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Error: \" + err.response?.data?.error || err.message);\n    }\n  };\n\n  const renderTable = () => {\n    if (!result) return null;\n\n    // MongoDB result is an array of objects\n    if (dbType === \"mongo\") {\n      return (\n        <table border=\"1\">\n          <thead>\n            <tr>\n              {Object.keys(result[0] || {}).map((key) => (\n                <th key={key}>{key}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {result.map((doc, idx) => (\n              <tr key={idx}>\n                {Object.values(doc).map((val, i) => (\n                  <td key={i}>{JSON.stringify(val)}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    }\n\n    // SQL results\n    return (\n      <table border=\"1\">\n        <thead>\n          <tr>\n            {result.columns.map((col) => (\n              <th key={col}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {result.rows.map((row, i) => (\n            <tr key={i}>\n              {row.map((cell, j) => (\n                <td key={j}>{cell}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>üîå AI-Driven Multi-DB Query Interface</h2>\n\n      <label>Select Database:</label>\n      <select value={dbType} onChange={(e) => setDbType(e.target.value)}>\n        <option value=\"mysql\">MySQL (GPT Prompt)</option>\n        <option value=\"postgres\">PostgreSQL (Manual SQL)</option>\n        <option value=\"mongo\">MongoDB (Manual Query)</option>\n      </select>\n\n      {dbType === \"mysql\" && (\n        <>\n          <div>\n            <input\n              placeholder=\"Optional Schema (e.g., users(name, age))\"\n              value={schema}\n              onChange={(e) => setSchema(e.target.value)}\n              style={{ width: \"100%\", margin: \"8px 0\" }}\n            />\n            <input\n              placeholder=\"Prompt (e.g., show users over age 30)\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              style={{ width: \"100%\", margin: \"8px 0\" }}\n            />\n          </div>\n        </>\n      )}\n\n      {dbType === \"postgres\" && (\n        <input\n          placeholder=\"Enter SQL (e.g., SELECT * FROM employees)\"\n          value={manualSQL}\n          onChange={(e) => setManualSQL(e.target.value)}\n          style={{ width: \"100%\", margin: \"8px 0\" }}\n        />\n      )}\n\n      {dbType === \"mongo\" && (\n        <>\n          <input\n            placeholder=\"Collection name\"\n            value={collection}\n            onChange={(e) => setCollection(e.target.value)}\n            style={{ width: \"100%\", margin: \"8px 0\" }}\n          />\n          <input\n            placeholder='Query (e.g., {\"age\": {\"$gt\": 25}})'\n            value={mongoQuery}\n            onChange={(e) => setMongoQuery(e.target.value)}\n            style={{ width: \"100%\", margin: \"8px 0\" }}\n          />\n        </>\n      )}\n\n      <button onClick={handleSubmit} style={{ marginTop: 10 }}>\n        Run Query\n      </button>\n\n      {sql && (\n        <div>\n          <h4>Generated SQL:</h4>\n          <pre>{sql}</pre>\n        </div>\n      )}\n\n      {renderTable()}\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}