{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\netod\\\\Desktop\\\\mysql-mcp-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // // // // src/App.js\n// // // // import React, { useState } from \"react\";\n// // // // import axios from \"axios\";\n\n// // // // export default function App() {\n// // // //   const [schema, setSchema] = useState(\"\");\n// // // //   const [prompt, setPrompt] = useState(\"\");\n// // // //   const [response, setResponse] = useState(null);\n// // // //   const [sql, setSql] = useState(\"\");\n\n// // // //   const handleSubmit = async () => {\n// // // //     const res = await axios.post(\"http://localhost:8000/query\", { schema, prompt });\n// // // //     setSql(res.data.sql);\n// // // //     setResponse(res.data.result);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Prompt to SQL</h2>\n// // // //       <input placeholder=\"Schema\" value={schema} onChange={(e) => setSchema(e.target.value)} />\n// // // //       <input placeholder=\"Prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n// // // //       <button onClick={handleSubmit}>Submit</button>\n// // // //       {sql && <pre>{sql}</pre>}\n// // // //       {response && <table><thead><tr>{response.columns.map(c => <th>{c}</th>)}</tr></thead><tbody>{response.rows.map(row => <tr>{row.map(cell => <td>{cell}</td>)}</tr>)}</tbody></table>}\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // import React, { useState } from \"react\";\n// // // import axios from \"axios\";\n\n// // // export default function App() {\n// // //   const [schema, setSchema] = useState(\"\");\n// // //   const [prompt, setPrompt] = useState(\"\");\n// // //   const [sql, setSql] = useState(\"\");\n// // //   const [manualSQL, setManualSQL] = useState(\"\");\n// // //   const [response, setResponse] = useState(null);\n\n// // //   const handlePromptSubmit = async () => {\n// // //     try {\n// // //       const res = await axios.post(\"http://localhost:8000/query\", {\n// // //         schema,\n// // //         prompt,\n// // //       });\n// // //       setSql(res.data.sql);\n// // //       setResponse(res.data.result);\n// // //     } catch (err) {\n// // //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// // //     }\n// // //   };\n\n// // //   const handleManualSubmit = async () => {\n// // //     try {\n// // //       const res = await axios.post(\"http://localhost:8000/manual-query\", {\n// // //         sql: manualSQL,\n// // //       });\n// // //       setSql(manualSQL);\n// // //       setResponse(res.data.result);\n// // //     } catch (err) {\n// // //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div style={{ padding: 20 }}>\n// // //       <h2>üîç Prompt to SQL</h2>\n// // //       <input\n// // //         placeholder=\"Schema (e.g. users(id,name,email))\"\n// // //         value={schema}\n// // //         onChange={(e) => setSchema(e.target.value)}\n// // //         style={{ width: \"80%\", marginBottom: 10 }}\n// // //       />\n// // //       <br />\n// // //       <input\n// // //         placeholder=\"Enter your prompt\"\n// // //         value={prompt}\n// // //         onChange={(e) => setPrompt(e.target.value)}\n// // //         style={{ width: \"80%\", marginBottom: 10 }}\n// // //       />\n// // //       <br />\n// // //       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n// // //       <h2 style={{ marginTop: 40 }}>üìù Run Manual SQL</h2>\n// // //       <input\n// // //         placeholder=\"Enter SQL (e.g. SELECT * FROM users)\"\n// // //         value={manualSQL}\n// // //         onChange={(e) => setManualSQL(e.target.value)}\n// // //         style={{ width: \"80%\", marginBottom: 10 }}\n// // //       />\n// // //       <br />\n// // //       <button onClick={handleManualSubmit}>Run SQL</button>\n\n// // //       {sql && (\n// // //         <div style={{ marginTop: 20 }}>\n// // //           <h4>Generated SQL:</h4>\n// // //           <pre>{sql}</pre>\n// // //         </div>\n// // //       )}\n\n// // //       {response && (\n// // //         <div>\n// // //           <h4>Result:</h4>\n// // //           <table border=\"1\" cellPadding=\"5\">\n// // //             <thead>\n// // //               <tr>\n// // //                 {response.columns.map((col, idx) => (\n// // //                   <th key={idx}>{col}</th>\n// // //                 ))}\n// // //               </tr>\n// // //             </thead>\n// // //             <tbody>\n// // //               {response.rows.map((row, i) => (\n// // //                 <tr key={i}>\n// // //                   {row.map((cell, j) => (\n// // //                     <td key={j}>{cell}</td>\n// // //                   ))}\n// // //                 </tr>\n// // //               ))}\n// // //             </tbody>\n// // //           </table>\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // }\n\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function App() {\n// //   const [dbType, setDbType] = useState(\"mysql\");\n// //   const [schema, setSchema] = useState(\"\");\n// //   const [prompt, setPrompt] = useState(\"\");\n// //   const [manualSQL, setManualSQL] = useState(\"\");\n// //   const [collection, setCollection] = useState(\"\");\n// //   const [mongoQuery, setMongoQuery] = useState(\"{}\");\n// //   const [result, setResult] = useState(null);\n// //   const [sql, setSql] = useState(\"\");\n\n// //   const backend = \"http://localhost:8000\";\n\n// //   const handlePromptSubmit = async () => {\n// //     try {\n// //       let res;\n// //       if (dbType === \"mysql\") {\n// //         res = await axios.post(`${backend}/query`, { prompt, schema });\n// //       } else if (dbType === \"postgres\") {\n// //         res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n// //       } else if (dbType === \"mongo\") {\n// //         res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n// //       }\n\n// //       setSql(res.data.sql || \"\");\n// //       setResult(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + (err.response?.data?.error || err.message));\n// //     }\n// //   };\n\n// //   const handleManualSubmit = async () => {\n// //     try {\n// //       let res;\n// //       if (dbType === \"mysql\") {\n// //         res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n// //       } else if (dbType === \"postgres\") {\n// //         res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n// //       } else if (dbType === \"mongo\") {\n// //         res = await axios.post(`${backend}/mongo-query`, {\n// //           collection,\n// //           query: JSON.parse(mongoQuery)\n// //         });\n// //       }\n// //       setSql(manualSQL);\n// //       setResult(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + (err.response?.data?.error || err.message));\n// //     }\n// //   };\n\n// //   const renderResult = () => {\n// //     if (!result) return null;\n// //     if (dbType === \"mongo\") {\n// //       return (\n// //         <table border=\"1\" cellPadding=\"5\">\n// //           <thead>\n// //             <tr>\n// //               {Object.keys(result[0] || {}).map((key) => (\n// //                 <th key={key}>{key}</th>\n// //               ))}\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {result.map((doc, i) => (\n// //               <tr key={i}>\n// //                 {Object.values(doc).map((val, j) => (\n// //                   <td key={j}>{JSON.stringify(val)}</td>\n// //                 ))}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       );\n// //     } else {\n// //       return (\n// //         <table border=\"1\" cellPadding=\"5\">\n// //           <thead>\n// //             <tr>\n// //               {result.columns.map((col, i) => <th key={i}>{col}</th>)}\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {result.rows.map((row, i) => (\n// //               <tr key={i}>\n// //                 {row.map((cell, j) => <td key={j}>{cell}</td>)}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       );\n// //     }\n// //   };\n\n// //   return (\n// //     <div style={{ padding: 20 }}>\n// //       <h2>üìä Universal DB Query Interface</h2>\n\n// //       <label>Select Database:</label>\n// //       <select value={dbType} onChange={(e) => setDbType(e.target.value)}>\n// //         <option value=\"mysql\">MySQL</option>\n// //         <option value=\"postgres\">PostgreSQL</option>\n// //         <option value=\"mongo\">MongoDB</option>\n// //       </select>\n\n// //       <hr />\n\n// //       <h3>üß† Natural Language Prompt</h3>\n// //       <input\n// //         placeholder=\"Schema (optional)\"\n// //         value={schema}\n// //         onChange={(e) => setSchema(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 8 }}\n// //       />\n// //       <br />\n// //       <input\n// //         placeholder=\"Prompt (e.g. show all users over 30)\"\n// //         value={prompt}\n// //         onChange={(e) => setPrompt(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 8 }}\n// //       />\n// //       <br />\n// //       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n// //       <h3 style={{ marginTop: 30 }}>‚úçÔ∏è Manual Query</h3>\n\n// //       {dbType === \"mongo\" && (\n// //         <>\n// //           <input\n// //             placeholder=\"Collection\"\n// //             value={collection}\n// //             onChange={(e) => setCollection(e.target.value)}\n// //             style={{ width: \"80%\", marginBottom: 8 }}\n// //           />\n// //           <br />\n// //           <input\n// //             placeholder='Query JSON (e.g. {\"age\": {\"$gt\": 25}})'\n// //             value={mongoQuery}\n// //             onChange={(e) => setMongoQuery(e.target.value)}\n// //             style={{ width: \"80%\", marginBottom: 8 }}\n// //           />\n// //         </>\n// //       )}\n\n// //       {dbType !== \"mongo\" && (\n// //         <input\n// //           placeholder=\"SQL (e.g. SELECT * FROM table)\"\n// //           value={manualSQL}\n// //           onChange={(e) => setManualSQL(e.target.value)}\n// //           style={{ width: \"80%\", marginBottom: 8 }}\n// //         />\n// //       )}\n\n// //       <br />\n// //       <button onClick={handleManualSubmit}>Run Manual Query</button>\n\n// //       {sql && (\n// //         <>\n// //           <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n// //           <pre>{sql}</pre>\n// //         </>\n// //       )}\n\n// //       <h4 style={{ marginTop: 20 }}>üìã Result</h4>\n// //       {renderResult()}\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function App() {\n//   const [dbType, setDbType] = useState(\"mysql\");\n//   const [schema, setSchema] = useState(\"\");\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [manualSQL, setManualSQL] = useState(\"\");\n//   const [collection, setCollection] = useState(\"\");\n//   const [mongoQuery, setMongoQuery] = useState(\"{}\");\n//   const [result, setResult] = useState(null);\n//   const [sql, setSql] = useState(\"\");\n\n//   const backend = \"http://localhost:8000\";\n\n//   const handlePromptSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/query`, { prompt, schema });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n//       }\n\n//       setSql(res.data.sql || \"\");\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const handleManualSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-query`, {\n//           collection,\n//           query: JSON.parse(mongoQuery)\n//         });\n//       }\n//       setSql(manualSQL);\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const renderResult = () => {\n//     if (!result) return null;\n\n//     const tableStyle = {\n//       borderCollapse: \"collapse\",\n//       width: \"100%\",\n//       marginTop: 10,\n//     };\n\n//     const thtd = {\n//       border: \"1px solid #ccc\",\n//       padding: \"8px\",\n//       textAlign: \"left\",\n//     };\n\n//     return (\n//       <table style={tableStyle}>\n//         <thead>\n//           <tr>\n//             {(dbType === \"mongo\"\n//               ? Object.keys(result[0] || {})\n//               : result.columns\n//             ).map((col, i) => (\n//               <th style={thtd} key={i}>{col}</th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {(dbType === \"mongo\" ? result : result.rows).map((row, i) => (\n//             <tr key={i}>\n//               {(dbType === \"mongo\" ? Object.values(row) : row).map((cell, j) => (\n//                 <td style={thtd} key={j}>\n//                   {typeof cell === \"object\" ? JSON.stringify(cell) : cell}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     );\n//   };\n\n//   return (\n//     <div style={{ padding: 30, fontFamily: \"Arial, sans-serif\", maxWidth: 900, margin: \"auto\" }}>\n//       <h2 style={{ marginBottom: 10 }}>üìä Universal DB Query Interface</h2>\n\n//       <div style={{ marginBottom: 20 }}>\n//         <label><strong>Select Database:</strong></label><br />\n//         <select value={dbType} onChange={(e) => setDbType(e.target.value)} style={{ padding: 6, marginTop: 4 }}>\n//           <option value=\"mysql\">MySQL</option>\n//           <option value=\"postgres\">PostgreSQL</option>\n//           <option value=\"mongo\">MongoDB</option>\n//         </select>\n//       </div>\n\n//       {/* --- Prompt Section --- */}\n//       <div style={{ marginBottom: 30 }}>\n//         <h3>üß† Natural Language Prompt</h3>\n//         <input\n//           placeholder=\"Schema (optional)\"\n//           value={schema}\n//           onChange={(e) => setSchema(e.target.value)}\n//           style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//         />\n//         <input\n//           placeholder=\"Prompt (e.g. show all users over 30)\"\n//           value={prompt}\n//           onChange={(e) => setPrompt(e.target.value)}\n//           style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//         />\n//         <button\n//           onClick={handlePromptSubmit}\n//           style={{\n//             padding: \"10px 16px\",\n//             background: \"#4CAF50\",\n//             color: \"white\",\n//             border: \"none\",\n//             cursor: \"pointer\",\n//             borderRadius: 4\n//           }}\n//         >\n//           Submit Prompt\n//         </button>\n//       </div>\n\n//       {/* --- Manual Query Section --- */}\n//       <div>\n//         <h3>‚úçÔ∏è Manual Query</h3>\n\n//         {dbType === \"mongo\" ? (\n//           <>\n//             <input\n//               placeholder=\"Collection\"\n//               value={collection}\n//               onChange={(e) => setCollection(e.target.value)}\n//               style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//             />\n//             <input\n//               placeholder='Query JSON (e.g. {\"gpa\": {\"$gt\": 3.0}})'\n//               value={mongoQuery}\n//               onChange={(e) => setMongoQuery(e.target.value)}\n//               style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//             />\n//           </>\n//         ) : (\n//           <input\n//             placeholder=\"SQL (e.g. SELECT * FROM students)\"\n//             value={manualSQL}\n//             onChange={(e) => setManualSQL(e.target.value)}\n//             style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//           />\n//         )}\n\n//         <button\n//           onClick={handleManualSubmit}\n//           style={{\n//             padding: \"10px 16px\",\n//             background: \"#2196F3\",\n//             color: \"white\",\n//             border: \"none\",\n//             cursor: \"pointer\",\n//             borderRadius: 4\n//           }}\n//         >\n//           Run Manual Query\n//         </button>\n//       </div>\n\n//       {/* --- SQL Used --- */}\n//       {sql && dbType !== \"mongo\" && (\n//         <>\n//           <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n//           <pre style={{\n//             background: \"#f4f4f4\",\n//             padding: 10,\n//             borderRadius: 4,\n//             overflowX: \"auto\"\n//           }}>{sql}</pre>\n//         </>\n//       )}\n\n//       {/* --- Results --- */}\n//       {result && (\n//         <>\n//           <h4 style={{ marginTop: 30 }}>üìã Result</h4>\n//           {renderResult()}\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [dbType, setDbType] = useState(\"mysql\");\n  const [schema, setSchema] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [manualSQL, setManualSQL] = useState(\"\");\n  const [collection, setCollection] = useState(\"\");\n  const [mongoQuery, setMongoQuery] = useState(\"{}\");\n  const [result, setResult] = useState(null);\n  const [sql, setSql] = useState(\"\");\n  const backend = \"http://localhost:8000\";\n  const handlePromptSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/query`, {\n          prompt,\n          schema\n        });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-nl-query`, {\n          prompt,\n          schema\n        });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-nl-query`, {\n          prompt,\n          schema\n        });\n      }\n      setSql(res.data.sql || \"\");\n      setResult(res.data.result);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert(\"Error: \" + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message));\n    }\n  };\n  const handleManualSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/manual-query`, {\n          sql: manualSQL\n        });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-query`, {\n          sql: manualSQL\n        });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-query`, {\n          collection,\n          query: JSON.parse(mongoQuery)\n        });\n      }\n      setSql(manualSQL);\n      setResult(res.data.result);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      alert(\"Error: \" + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message));\n    }\n  };\n  const renderResult = () => {\n    if (!result) return null;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      style: styles.table,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: (dbType === \"mongo\" ? Object.keys(result[0] || {}) : result.columns).map((col, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n            style: styles.thtd,\n            children: col\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: (dbType === \"mongo\" ? result : result.rows).map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: (dbType === \"mongo\" ? Object.values(row) : row).map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: styles.thtd,\n            children: typeof cell === \"object\" ? JSON.stringify(cell) : cell\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.page,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: styles.title,\n        children: \"\\uD83D\\uDCCA Universal DB Query Interface\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.label,\n        children: \"Select Database:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: dbType,\n        onChange: e => setDbType(e.target.value),\n        style: styles.select,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mysql\",\n          children: \"MySQL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"postgres\",\n          children: \"PostgreSQL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"mongo\",\n          children: \"MongoDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.sectionTitle,\n        children: \"\\uD83E\\uDDE0 Natural Language Prompt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: styles.input,\n        placeholder: \"Schema (optional)\",\n        value: schema,\n        onChange: e => setSchema(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: styles.input,\n        placeholder: \"Prompt (e.g. show all users over 30)\",\n        value: prompt,\n        onChange: e => setPrompt(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: styles.buttonGreen,\n        onClick: handlePromptSubmit,\n        children: \"Submit Prompt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: styles.sectionTitle,\n        children: \"\\u270D\\uFE0F Manual Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), dbType === \"mongo\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          style: styles.input,\n          placeholder: \"Collection\",\n          value: collection,\n          onChange: e => setCollection(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: styles.input,\n          placeholder: \"Query JSON (e.g. {\\\"gpa\\\": {\\\"$gt\\\": 3.0}})\",\n          value: mongoQuery,\n          onChange: e => setMongoQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"input\", {\n        style: styles.input,\n        placeholder: \"SQL (e.g. SELECT * FROM students)\",\n        value: manualSQL,\n        onChange: e => setManualSQL(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: styles.buttonBlue,\n        onClick: handleManualSubmit,\n        children: \"Run Manual Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this), sql && dbType !== \"mongo\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: styles.sectionTitle,\n          children: \"\\uD83E\\uDDFE SQL Used\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: styles.sqlBox,\n          children: sql\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), result && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: styles.sectionTitle,\n          children: \"\\uD83D\\uDCCB Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }, this), renderResult()]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 588,\n    columnNumber: 5\n  }, this);\n}\n\n// --- Style Object ---\n_s(App, \"LOPpEITBX8cy8ttTJMng6FRC0nw=\");\n_c = App;\nconst styles = {\n  page: {\n    background: \"linear-gradient(to right, #667eea, #764ba2)\",\n    minHeight: \"100vh\",\n    padding: 20,\n    fontFamily: \"'Segoe UI', sans-serif\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  container: {\n    background: \"rgba(255, 255, 255, 0.9)\",\n    borderRadius: 12,\n    padding: 30,\n    width: \"90%\",\n    maxWidth: 800,\n    boxShadow: \"0 8px 20px rgba(0,0,0,0.2)\",\n    backdropFilter: \"blur(10px)\"\n  },\n  title: {\n    textAlign: \"center\",\n    marginBottom: 20,\n    color: \"#333\"\n  },\n  sectionTitle: {\n    marginTop: 30,\n    marginBottom: 10,\n    color: \"#444\"\n  },\n  label: {\n    display: \"block\",\n    marginBottom: 6,\n    fontWeight: \"bold\"\n  },\n  input: {\n    width: \"100%\",\n    padding: \"10px\",\n    borderRadius: 8,\n    border: \"1px solid #ccc\",\n    marginBottom: 12,\n    fontSize: 14\n  },\n  select: {\n    width: \"100%\",\n    padding: \"10px\",\n    borderRadius: 8,\n    border: \"1px solid #ccc\",\n    marginBottom: 20,\n    fontSize: 14\n  },\n  buttonGreen: {\n    backgroundColor: \"#4CAF50\",\n    color: \"white\",\n    padding: \"10px 20px\",\n    borderRadius: 8,\n    border: \"none\",\n    cursor: \"pointer\",\n    marginBottom: 10\n  },\n  buttonBlue: {\n    backgroundColor: \"#2196F3\",\n    color: \"white\",\n    padding: \"10px 20px\",\n    borderRadius: 8,\n    border: \"none\",\n    cursor: \"pointer\"\n  },\n  sqlBox: {\n    backgroundColor: \"#f1f1f1\",\n    padding: 12,\n    borderRadius: 8,\n    overflowX: \"auto\",\n    fontSize: 13\n  },\n  table: {\n    borderCollapse: \"collapse\",\n    width: \"100%\",\n    marginTop: 10,\n    fontSize: 14\n  },\n  thtd: {\n    border: \"1px solid #ddd\",\n    padding: \"10px\",\n    textAlign: \"left\"\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","dbType","setDbType","schema","setSchema","prompt","setPrompt","manualSQL","setManualSQL","collection","setCollection","mongoQuery","setMongoQuery","result","setResult","sql","setSql","backend","handlePromptSubmit","res","post","data","err","_err$response","_err$response$data","alert","response","error","message","handleManualSubmit","query","JSON","parse","_err$response2","_err$response2$data","renderResult","style","styles","table","children","Object","keys","columns","map","col","i","thtd","fileName","_jsxFileName","lineNumber","columnNumber","rows","row","values","cell","j","stringify","page","container","title","label","value","onChange","e","target","select","sectionTitle","input","placeholder","buttonGreen","onClick","buttonBlue","sqlBox","_c","background","minHeight","padding","fontFamily","display","justifyContent","alignItems","borderRadius","width","maxWidth","boxShadow","backdropFilter","textAlign","marginBottom","color","marginTop","fontWeight","border","fontSize","backgroundColor","cursor","overflowX","borderCollapse","$RefreshReg$"],"sources":["C:/Users/netod/Desktop/mysql-mcp-project/frontend/src/App.js"],"sourcesContent":["// // // // // src/App.js\n// // // // import React, { useState } from \"react\";\n// // // // import axios from \"axios\";\n\n// // // // export default function App() {\n// // // //   const [schema, setSchema] = useState(\"\");\n// // // //   const [prompt, setPrompt] = useState(\"\");\n// // // //   const [response, setResponse] = useState(null);\n// // // //   const [sql, setSql] = useState(\"\");\n\n// // // //   const handleSubmit = async () => {\n// // // //     const res = await axios.post(\"http://localhost:8000/query\", { schema, prompt });\n// // // //     setSql(res.data.sql);\n// // // //     setResponse(res.data.result);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Prompt to SQL</h2>\n// // // //       <input placeholder=\"Schema\" value={schema} onChange={(e) => setSchema(e.target.value)} />\n// // // //       <input placeholder=\"Prompt\" value={prompt} onChange={(e) => setPrompt(e.target.value)} />\n// // // //       <button onClick={handleSubmit}>Submit</button>\n// // // //       {sql && <pre>{sql}</pre>}\n// // // //       {response && <table><thead><tr>{response.columns.map(c => <th>{c}</th>)}</tr></thead><tbody>{response.rows.map(row => <tr>{row.map(cell => <td>{cell}</td>)}</tr>)}</tbody></table>}\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // import React, { useState } from \"react\";\n// // // import axios from \"axios\";\n\n// // // export default function App() {\n// // //   const [schema, setSchema] = useState(\"\");\n// // //   const [prompt, setPrompt] = useState(\"\");\n// // //   const [sql, setSql] = useState(\"\");\n// // //   const [manualSQL, setManualSQL] = useState(\"\");\n// // //   const [response, setResponse] = useState(null);\n\n// // //   const handlePromptSubmit = async () => {\n// // //     try {\n// // //       const res = await axios.post(\"http://localhost:8000/query\", {\n// // //         schema,\n// // //         prompt,\n// // //       });\n// // //       setSql(res.data.sql);\n// // //       setResponse(res.data.result);\n// // //     } catch (err) {\n// // //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// // //     }\n// // //   };\n\n// // //   const handleManualSubmit = async () => {\n// // //     try {\n// // //       const res = await axios.post(\"http://localhost:8000/manual-query\", {\n// // //         sql: manualSQL,\n// // //       });\n// // //       setSql(manualSQL);\n// // //       setResponse(res.data.result);\n// // //     } catch (err) {\n// // //       alert(\"Error: \" + err.response?.data?.error || err.message);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div style={{ padding: 20 }}>\n// // //       <h2>üîç Prompt to SQL</h2>\n// // //       <input\n// // //         placeholder=\"Schema (e.g. users(id,name,email))\"\n// // //         value={schema}\n// // //         onChange={(e) => setSchema(e.target.value)}\n// // //         style={{ width: \"80%\", marginBottom: 10 }}\n// // //       />\n// // //       <br />\n// // //       <input\n// // //         placeholder=\"Enter your prompt\"\n// // //         value={prompt}\n// // //         onChange={(e) => setPrompt(e.target.value)}\n// // //         style={{ width: \"80%\", marginBottom: 10 }}\n// // //       />\n// // //       <br />\n// // //       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n// // //       <h2 style={{ marginTop: 40 }}>üìù Run Manual SQL</h2>\n// // //       <input\n// // //         placeholder=\"Enter SQL (e.g. SELECT * FROM users)\"\n// // //         value={manualSQL}\n// // //         onChange={(e) => setManualSQL(e.target.value)}\n// // //         style={{ width: \"80%\", marginBottom: 10 }}\n// // //       />\n// // //       <br />\n// // //       <button onClick={handleManualSubmit}>Run SQL</button>\n\n// // //       {sql && (\n// // //         <div style={{ marginTop: 20 }}>\n// // //           <h4>Generated SQL:</h4>\n// // //           <pre>{sql}</pre>\n// // //         </div>\n// // //       )}\n\n// // //       {response && (\n// // //         <div>\n// // //           <h4>Result:</h4>\n// // //           <table border=\"1\" cellPadding=\"5\">\n// // //             <thead>\n// // //               <tr>\n// // //                 {response.columns.map((col, idx) => (\n// // //                   <th key={idx}>{col}</th>\n// // //                 ))}\n// // //               </tr>\n// // //             </thead>\n// // //             <tbody>\n// // //               {response.rows.map((row, i) => (\n// // //                 <tr key={i}>\n// // //                   {row.map((cell, j) => (\n// // //                     <td key={j}>{cell}</td>\n// // //                   ))}\n// // //                 </tr>\n// // //               ))}\n// // //             </tbody>\n// // //           </table>\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // }\n\n\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function App() {\n// //   const [dbType, setDbType] = useState(\"mysql\");\n// //   const [schema, setSchema] = useState(\"\");\n// //   const [prompt, setPrompt] = useState(\"\");\n// //   const [manualSQL, setManualSQL] = useState(\"\");\n// //   const [collection, setCollection] = useState(\"\");\n// //   const [mongoQuery, setMongoQuery] = useState(\"{}\");\n// //   const [result, setResult] = useState(null);\n// //   const [sql, setSql] = useState(\"\");\n\n// //   const backend = \"http://localhost:8000\";\n\n// //   const handlePromptSubmit = async () => {\n// //     try {\n// //       let res;\n// //       if (dbType === \"mysql\") {\n// //         res = await axios.post(`${backend}/query`, { prompt, schema });\n// //       } else if (dbType === \"postgres\") {\n// //         res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n// //       } else if (dbType === \"mongo\") {\n// //         res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n// //       }\n\n// //       setSql(res.data.sql || \"\");\n// //       setResult(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + (err.response?.data?.error || err.message));\n// //     }\n// //   };\n\n// //   const handleManualSubmit = async () => {\n// //     try {\n// //       let res;\n// //       if (dbType === \"mysql\") {\n// //         res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n// //       } else if (dbType === \"postgres\") {\n// //         res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n// //       } else if (dbType === \"mongo\") {\n// //         res = await axios.post(`${backend}/mongo-query`, {\n// //           collection,\n// //           query: JSON.parse(mongoQuery)\n// //         });\n// //       }\n// //       setSql(manualSQL);\n// //       setResult(res.data.result);\n// //     } catch (err) {\n// //       alert(\"Error: \" + (err.response?.data?.error || err.message));\n// //     }\n// //   };\n\n// //   const renderResult = () => {\n// //     if (!result) return null;\n// //     if (dbType === \"mongo\") {\n// //       return (\n// //         <table border=\"1\" cellPadding=\"5\">\n// //           <thead>\n// //             <tr>\n// //               {Object.keys(result[0] || {}).map((key) => (\n// //                 <th key={key}>{key}</th>\n// //               ))}\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {result.map((doc, i) => (\n// //               <tr key={i}>\n// //                 {Object.values(doc).map((val, j) => (\n// //                   <td key={j}>{JSON.stringify(val)}</td>\n// //                 ))}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       );\n// //     } else {\n// //       return (\n// //         <table border=\"1\" cellPadding=\"5\">\n// //           <thead>\n// //             <tr>\n// //               {result.columns.map((col, i) => <th key={i}>{col}</th>)}\n// //             </tr>\n// //           </thead>\n// //           <tbody>\n// //             {result.rows.map((row, i) => (\n// //               <tr key={i}>\n// //                 {row.map((cell, j) => <td key={j}>{cell}</td>)}\n// //               </tr>\n// //             ))}\n// //           </tbody>\n// //         </table>\n// //       );\n// //     }\n// //   };\n\n// //   return (\n// //     <div style={{ padding: 20 }}>\n// //       <h2>üìä Universal DB Query Interface</h2>\n\n// //       <label>Select Database:</label>\n// //       <select value={dbType} onChange={(e) => setDbType(e.target.value)}>\n// //         <option value=\"mysql\">MySQL</option>\n// //         <option value=\"postgres\">PostgreSQL</option>\n// //         <option value=\"mongo\">MongoDB</option>\n// //       </select>\n\n// //       <hr />\n\n// //       <h3>üß† Natural Language Prompt</h3>\n// //       <input\n// //         placeholder=\"Schema (optional)\"\n// //         value={schema}\n// //         onChange={(e) => setSchema(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 8 }}\n// //       />\n// //       <br />\n// //       <input\n// //         placeholder=\"Prompt (e.g. show all users over 30)\"\n// //         value={prompt}\n// //         onChange={(e) => setPrompt(e.target.value)}\n// //         style={{ width: \"80%\", marginBottom: 8 }}\n// //       />\n// //       <br />\n// //       <button onClick={handlePromptSubmit}>Submit Prompt</button>\n\n// //       <h3 style={{ marginTop: 30 }}>‚úçÔ∏è Manual Query</h3>\n\n// //       {dbType === \"mongo\" && (\n// //         <>\n// //           <input\n// //             placeholder=\"Collection\"\n// //             value={collection}\n// //             onChange={(e) => setCollection(e.target.value)}\n// //             style={{ width: \"80%\", marginBottom: 8 }}\n// //           />\n// //           <br />\n// //           <input\n// //             placeholder='Query JSON (e.g. {\"age\": {\"$gt\": 25}})'\n// //             value={mongoQuery}\n// //             onChange={(e) => setMongoQuery(e.target.value)}\n// //             style={{ width: \"80%\", marginBottom: 8 }}\n// //           />\n// //         </>\n// //       )}\n\n// //       {dbType !== \"mongo\" && (\n// //         <input\n// //           placeholder=\"SQL (e.g. SELECT * FROM table)\"\n// //           value={manualSQL}\n// //           onChange={(e) => setManualSQL(e.target.value)}\n// //           style={{ width: \"80%\", marginBottom: 8 }}\n// //         />\n// //       )}\n\n// //       <br />\n// //       <button onClick={handleManualSubmit}>Run Manual Query</button>\n\n// //       {sql && (\n// //         <>\n// //           <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n// //           <pre>{sql}</pre>\n// //         </>\n// //       )}\n\n// //       <h4 style={{ marginTop: 20 }}>üìã Result</h4>\n// //       {renderResult()}\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function App() {\n//   const [dbType, setDbType] = useState(\"mysql\");\n//   const [schema, setSchema] = useState(\"\");\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [manualSQL, setManualSQL] = useState(\"\");\n//   const [collection, setCollection] = useState(\"\");\n//   const [mongoQuery, setMongoQuery] = useState(\"{}\");\n//   const [result, setResult] = useState(null);\n//   const [sql, setSql] = useState(\"\");\n\n//   const backend = \"http://localhost:8000\";\n\n//   const handlePromptSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/query`, { prompt, schema });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n//       }\n\n//       setSql(res.data.sql || \"\");\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const handleManualSubmit = async () => {\n//     try {\n//       let res;\n//       if (dbType === \"mysql\") {\n//         res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n//       } else if (dbType === \"postgres\") {\n//         res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n//       } else if (dbType === \"mongo\") {\n//         res = await axios.post(`${backend}/mongo-query`, {\n//           collection,\n//           query: JSON.parse(mongoQuery)\n//         });\n//       }\n//       setSql(manualSQL);\n//       setResult(res.data.result);\n//     } catch (err) {\n//       alert(\"Error: \" + (err.response?.data?.error || err.message));\n//     }\n//   };\n\n//   const renderResult = () => {\n//     if (!result) return null;\n\n//     const tableStyle = {\n//       borderCollapse: \"collapse\",\n//       width: \"100%\",\n//       marginTop: 10,\n//     };\n\n//     const thtd = {\n//       border: \"1px solid #ccc\",\n//       padding: \"8px\",\n//       textAlign: \"left\",\n//     };\n\n//     return (\n//       <table style={tableStyle}>\n//         <thead>\n//           <tr>\n//             {(dbType === \"mongo\"\n//               ? Object.keys(result[0] || {})\n//               : result.columns\n//             ).map((col, i) => (\n//               <th style={thtd} key={i}>{col}</th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {(dbType === \"mongo\" ? result : result.rows).map((row, i) => (\n//             <tr key={i}>\n//               {(dbType === \"mongo\" ? Object.values(row) : row).map((cell, j) => (\n//                 <td style={thtd} key={j}>\n//                   {typeof cell === \"object\" ? JSON.stringify(cell) : cell}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     );\n//   };\n\n//   return (\n//     <div style={{ padding: 30, fontFamily: \"Arial, sans-serif\", maxWidth: 900, margin: \"auto\" }}>\n//       <h2 style={{ marginBottom: 10 }}>üìä Universal DB Query Interface</h2>\n\n//       <div style={{ marginBottom: 20 }}>\n//         <label><strong>Select Database:</strong></label><br />\n//         <select value={dbType} onChange={(e) => setDbType(e.target.value)} style={{ padding: 6, marginTop: 4 }}>\n//           <option value=\"mysql\">MySQL</option>\n//           <option value=\"postgres\">PostgreSQL</option>\n//           <option value=\"mongo\">MongoDB</option>\n//         </select>\n//       </div>\n\n//       {/* --- Prompt Section --- */}\n//       <div style={{ marginBottom: 30 }}>\n//         <h3>üß† Natural Language Prompt</h3>\n//         <input\n//           placeholder=\"Schema (optional)\"\n//           value={schema}\n//           onChange={(e) => setSchema(e.target.value)}\n//           style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//         />\n//         <input\n//           placeholder=\"Prompt (e.g. show all users over 30)\"\n//           value={prompt}\n//           onChange={(e) => setPrompt(e.target.value)}\n//           style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//         />\n//         <button\n//           onClick={handlePromptSubmit}\n//           style={{\n//             padding: \"10px 16px\",\n//             background: \"#4CAF50\",\n//             color: \"white\",\n//             border: \"none\",\n//             cursor: \"pointer\",\n//             borderRadius: 4\n//           }}\n//         >\n//           Submit Prompt\n//         </button>\n//       </div>\n\n//       {/* --- Manual Query Section --- */}\n//       <div>\n//         <h3>‚úçÔ∏è Manual Query</h3>\n\n//         {dbType === \"mongo\" ? (\n//           <>\n//             <input\n//               placeholder=\"Collection\"\n//               value={collection}\n//               onChange={(e) => setCollection(e.target.value)}\n//               style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//             />\n//             <input\n//               placeholder='Query JSON (e.g. {\"gpa\": {\"$gt\": 3.0}})'\n//               value={mongoQuery}\n//               onChange={(e) => setMongoQuery(e.target.value)}\n//               style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//             />\n//           </>\n//         ) : (\n//           <input\n//             placeholder=\"SQL (e.g. SELECT * FROM students)\"\n//             value={manualSQL}\n//             onChange={(e) => setManualSQL(e.target.value)}\n//             style={{ width: \"100%\", padding: 8, marginBottom: 8 }}\n//           />\n//         )}\n\n//         <button\n//           onClick={handleManualSubmit}\n//           style={{\n//             padding: \"10px 16px\",\n//             background: \"#2196F3\",\n//             color: \"white\",\n//             border: \"none\",\n//             cursor: \"pointer\",\n//             borderRadius: 4\n//           }}\n//         >\n//           Run Manual Query\n//         </button>\n//       </div>\n\n//       {/* --- SQL Used --- */}\n//       {sql && dbType !== \"mongo\" && (\n//         <>\n//           <h4 style={{ marginTop: 30 }}>üßæ SQL Used</h4>\n//           <pre style={{\n//             background: \"#f4f4f4\",\n//             padding: 10,\n//             borderRadius: 4,\n//             overflowX: \"auto\"\n//           }}>{sql}</pre>\n//         </>\n//       )}\n\n//       {/* --- Results --- */}\n//       {result && (\n//         <>\n//           <h4 style={{ marginTop: 30 }}>üìã Result</h4>\n//           {renderResult()}\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function App() {\n  const [dbType, setDbType] = useState(\"mysql\");\n  const [schema, setSchema] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [manualSQL, setManualSQL] = useState(\"\");\n  const [collection, setCollection] = useState(\"\");\n  const [mongoQuery, setMongoQuery] = useState(\"{}\");\n  const [result, setResult] = useState(null);\n  const [sql, setSql] = useState(\"\");\n\n  const backend = \"http://localhost:8000\";\n\n  const handlePromptSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/query`, { prompt, schema });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-nl-query`, { prompt, schema });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-nl-query`, { prompt, schema });\n      }\n\n      setSql(res.data.sql || \"\");\n      setResult(res.data.result);\n    } catch (err) {\n      alert(\"Error: \" + (err.response?.data?.error || err.message));\n    }\n  };\n\n  const handleManualSubmit = async () => {\n    try {\n      let res;\n      if (dbType === \"mysql\") {\n        res = await axios.post(`${backend}/manual-query`, { sql: manualSQL });\n      } else if (dbType === \"postgres\") {\n        res = await axios.post(`${backend}/postgres-query`, { sql: manualSQL });\n      } else if (dbType === \"mongo\") {\n        res = await axios.post(`${backend}/mongo-query`, {\n          collection,\n          query: JSON.parse(mongoQuery)\n        });\n      }\n      setSql(manualSQL);\n      setResult(res.data.result);\n    } catch (err) {\n      alert(\"Error: \" + (err.response?.data?.error || err.message));\n    }\n  };\n\n  const renderResult = () => {\n    if (!result) return null;\n\n    return (\n      <table style={styles.table}>\n        <thead>\n          <tr>\n            {(dbType === \"mongo\"\n              ? Object.keys(result[0] || {})\n              : result.columns\n            ).map((col, i) => (\n              <th style={styles.thtd} key={i}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {(dbType === \"mongo\" ? result : result.rows).map((row, i) => (\n            <tr key={i}>\n              {(dbType === \"mongo\" ? Object.values(row) : row).map((cell, j) => (\n                <td style={styles.thtd} key={j}>\n                  {typeof cell === \"object\" ? JSON.stringify(cell) : cell}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div style={styles.page}>\n      <div style={styles.container}>\n        <h2 style={styles.title}>üìä Universal DB Query Interface</h2>\n\n        <label style={styles.label}>Select Database:</label>\n        <select value={dbType} onChange={(e) => setDbType(e.target.value)} style={styles.select}>\n          <option value=\"mysql\">MySQL</option>\n          <option value=\"postgres\">PostgreSQL</option>\n          <option value=\"mongo\">MongoDB</option>\n        </select>\n\n        <h3 style={styles.sectionTitle}>üß† Natural Language Prompt</h3>\n        <input\n          style={styles.input}\n          placeholder=\"Schema (optional)\"\n          value={schema}\n          onChange={(e) => setSchema(e.target.value)}\n        />\n        <input\n          style={styles.input}\n          placeholder=\"Prompt (e.g. show all users over 30)\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n        />\n        <button style={styles.buttonGreen} onClick={handlePromptSubmit}>\n          Submit Prompt\n        </button>\n\n        <h3 style={styles.sectionTitle}>‚úçÔ∏è Manual Query</h3>\n        {dbType === \"mongo\" ? (\n          <>\n            <input\n              style={styles.input}\n              placeholder=\"Collection\"\n              value={collection}\n              onChange={(e) => setCollection(e.target.value)}\n            />\n            <input\n              style={styles.input}\n              placeholder='Query JSON (e.g. {\"gpa\": {\"$gt\": 3.0}})'\n              value={mongoQuery}\n              onChange={(e) => setMongoQuery(e.target.value)}\n            />\n          </>\n        ) : (\n          <input\n            style={styles.input}\n            placeholder=\"SQL (e.g. SELECT * FROM students)\"\n            value={manualSQL}\n            onChange={(e) => setManualSQL(e.target.value)}\n          />\n        )}\n\n        <button style={styles.buttonBlue} onClick={handleManualSubmit}>\n          Run Manual Query\n        </button>\n\n        {sql && dbType !== \"mongo\" && (\n          <>\n            <h4 style={styles.sectionTitle}>üßæ SQL Used</h4>\n            <pre style={styles.sqlBox}>{sql}</pre>\n          </>\n        )}\n\n        {result && (\n          <>\n            <h4 style={styles.sectionTitle}>üìã Result</h4>\n            {renderResult()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// --- Style Object ---\nconst styles = {\n  page: {\n    background: \"linear-gradient(to right, #667eea, #764ba2)\",\n    minHeight: \"100vh\",\n    padding: 20,\n    fontFamily: \"'Segoe UI', sans-serif\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  container: {\n    background: \"rgba(255, 255, 255, 0.9)\",\n    borderRadius: 12,\n    padding: 30,\n    width: \"90%\",\n    maxWidth: 800,\n    boxShadow: \"0 8px 20px rgba(0,0,0,0.2)\",\n    backdropFilter: \"blur(10px)\"\n  },\n  title: {\n    textAlign: \"center\",\n    marginBottom: 20,\n    color: \"#333\"\n  },\n  sectionTitle: {\n    marginTop: 30,\n    marginBottom: 10,\n    color: \"#444\"\n  },\n  label: {\n    display: \"block\",\n    marginBottom: 6,\n    fontWeight: \"bold\"\n  },\n  input: {\n    width: \"100%\",\n    padding: \"10px\",\n    borderRadius: 8,\n    border: \"1px solid #ccc\",\n    marginBottom: 12,\n    fontSize: 14\n  },\n  select: {\n    width: \"100%\",\n    padding: \"10px\",\n    borderRadius: 8,\n    border: \"1px solid #ccc\",\n    marginBottom: 20,\n    fontSize: 14\n  },\n  buttonGreen: {\n    backgroundColor: \"#4CAF50\",\n    color: \"white\",\n    padding: \"10px 20px\",\n    borderRadius: 8,\n    border: \"none\",\n    cursor: \"pointer\",\n    marginBottom: 10\n  },\n  buttonBlue: {\n    backgroundColor: \"#2196F3\",\n    color: \"white\",\n    padding: \"10px 20px\",\n    borderRadius: 8,\n    border: \"none\",\n    cursor: \"pointer\"\n  },\n  sqlBox: {\n    backgroundColor: \"#f1f1f1\",\n    padding: 12,\n    borderRadius: 8,\n    overflowX: \"auto\",\n    fontSize: 13\n  },\n  table: {\n    borderCollapse: \"collapse\",\n    width: \"100%\",\n    marginTop: 10,\n    fontSize: 14\n  },\n  thtd: {\n    border: \"1px solid #ddd\",\n    padding: \"10px\",\n    textAlign: \"left\"\n  }\n};\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}